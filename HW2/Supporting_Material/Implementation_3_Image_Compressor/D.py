# -*- coding: utf-8 -*-
"""Welcome To Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import os
from sklearn.cluster import KMeans

img = plt.imread('imageSmall.png')

###############     D     ######################

###############  K = 256  ######################
newImg = np.reshape(img, (img.shape[0] * img.shape[1], img.shape[2])) 
kmeans = KMeans(n_clusters=256, random_state=10).fit(newImg)
mask = kmeans.labels_
centers = kmeans.cluster_centers_

m, n = newImg.shape

for i in range(m):
  newImg[i] = centers[int(mask[i])]

nImg256 = np.reshape(newImg, (img.shape[0], img.shape[1], img.shape[2])) 

# plotting the compressed image. 
plt.imshow(nImg256)
plt.savefig("newImage256.png") 
plt.show()

##################### K = 16 ########################
newImg = np.reshape(img, (img.shape[0] * img.shape[1], img.shape[2])) 
kmeans = KMeans(n_clusters=16, random_state=10).fit(newImg)
mask = kmeans.labels_
centers = kmeans.cluster_centers_

m, n = newImg.shape

for i in range(m):
  newImg[i] = centers[int(mask[i])]

newImg = np.reshape(newImg, (img.shape[0], img.shape[1], img.shape[2])) 

plt.savefig("newImage166.png") 
plt.imshow(newImg)
plt.show()

sizeofOriginal = os.stat('imageSmall.png').st_size
ksize16 = os.stat('newImage16.png').st_size
ksize256 = os.stat('newImage256.png').st_size

print('--------------------------------------------------------------')
print("Size of original small photo is {}K bytes".format(sizeofOriginal/1000))
print("Size of photo with K = 16 is {}K bytes".format(ksize16/1000))
print("Size of photo with K = 256 is {}K bytes".format(ksize256/1000))
print('--------------------------------------------------------------')