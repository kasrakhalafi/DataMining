# -*- coding: utf-8 -*-
"""Welcome To Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

data1 = pd.read_csv('Dataset1.csv')
data1x = data1['X']
data1y = data1['Y']
plt.plot(data1x, data1y, '.')
plt.show()

data = np.zeros((len(data1x),2))
for i in range(len(data1x)):
  data[i] = [data1x[i], data1y[i]]
data = np.array(data)

print(data)

#DISTANCE CALCULATION
def distance(center,data):
  dist = 0
  for i in range(len(center)):
    dist += (center[i] - data[i])**2
  return dist

def make_centers(datainput):
  sum = np.zeros((1,len(datainput[0])))
  for i in range(len(datainput)):
    sum += datainput[i]
  return sum/len(datainput)

def make_mask(datainput, centers):
  mask = np.zeros((len(datainput),1))
  for i in range(len(datainput)):
    minDist = float('inf')
    for j in range(len(centers)):
      if distance(datainput[i], centers[j]) < minDist:
        minDist = distance(datainput[i], centers[j])
        mask[i] = j
  return mask

def K_Means(data,k):
  centers = np.zeros((k, len(data[0])))

  for i in range(k):
    centers[i] = np.random.randint(-2, 2, len(data[0]))
  
  for _ in range(15):
    mask = make_mask(data, centers)
    for j in range(k):
      mylist = []
      for m in range(len(mask)):
        if mask[m] == j:
          mylist.append(data[m])
      if len(mylist) == 0:
        return K_Means(data, k)
      centers[j] = make_centers(mylist)
  return mask, centers

_, ax1 = plt.subplots()
template = ['ro', 'bo', 'go', 'yo', 'r*', 'b*', 'g*', 'y*']

k = 2
mask1, centers1 = K_Means(data, k)
for i in range(len(data)):
    ax1.plot(data[i][1], data[i][0], template[int(mask1[i])])
plt.show()

_, ax2 = plt.subplots()
template = ['ro', 'bo', 'go', 'yo', 'r*', 'b*', 'g*', 'y*']

k = 3
mask2, centers2 = K_Means(data, k)
for i in range(len(data)):
    ax2.plot(data[i][1], data[i][0], template[int(mask2[i])])
plt.show()

_, ax3 = plt.subplots()
template = ['ro', 'bo', 'go', 'yo', 'r*', 'b*', 'g*', 'y*']

k = 4
mask3, centers3 = K_Means(data, k)
for i in range(len(data)):
    ax3.plot(data[i][1], data[i][0], template[int(mask3[i])])
plt.show()